// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/27/2017 10:40:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    motor_12
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module motor_12_vlg_sample_tst(
	arrival,
	clk_1KHz,
	t_floor,
	sampler_tx
);
input  arrival;
input  clk_1KHz;
input [1:0] t_floor;
output sampler_tx;

reg sample;
time current_time;
always @(arrival or clk_1KHz or t_floor)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module motor_12_vlg_check_tst (
	c_floor,
	lock,
	sampler_rx
);
input [1:0] c_floor;
input  lock;
input sampler_rx;

reg [1:0] c_floor_expected;
reg  lock_expected;

reg [1:0] c_floor_prev;
reg  lock_prev;

reg [1:0] c_floor_expected_prev;
reg  lock_expected_prev;

reg [1:0] last_c_floor_exp;
reg  last_lock_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_floor_prev = c_floor;
	lock_prev = lock;
end

// update expected /o prevs

always @(trigger)
begin
	c_floor_expected_prev = c_floor_expected;
	lock_expected_prev = lock_expected;
end


// expected c_floor[ 1 ]
initial
begin
	c_floor_expected[1] = 1'bX;
	c_floor_expected[1] = #999000 1'b0;
end 
// expected c_floor[ 0 ]
initial
begin
	c_floor_expected[0] = 1'bX;
	c_floor_expected[0] = #999000 1'b0;
end 

// expected lock
initial
begin
	lock_expected = 1'bX;
end 
// generate trigger
always @(c_floor_expected or c_floor or lock_expected or lock)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c_floor = %b | expected lock = %b | ",c_floor_expected_prev,lock_expected_prev);
	$display("| real c_floor = %b | real lock = %b | ",c_floor_prev,lock_prev);
`endif
	if (
		( c_floor_expected_prev[0] !== 1'bx ) && ( c_floor_prev[0] !== c_floor_expected_prev[0] )
		&& ((c_floor_expected_prev[0] !== last_c_floor_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_floor[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_floor_expected_prev);
		$display ("     Real value = %b", c_floor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_floor_exp[0] = c_floor_expected_prev[0];
	end
	if (
		( c_floor_expected_prev[1] !== 1'bx ) && ( c_floor_prev[1] !== c_floor_expected_prev[1] )
		&& ((c_floor_expected_prev[1] !== last_c_floor_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_floor[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_floor_expected_prev);
		$display ("     Real value = %b", c_floor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_floor_exp[1] = c_floor_expected_prev[1];
	end
	if (
		( lock_expected_prev !== 1'bx ) && ( lock_prev !== lock_expected_prev )
		&& ((lock_expected_prev !== last_lock_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lock_expected_prev);
		$display ("     Real value = %b", lock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lock_exp = lock_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module motor_12_vlg_vec_tst();
// constants                                           
// general purpose registers
reg arrival;
reg clk_1KHz;
reg [1:0] t_floor;
// wires                                               
wire [1:0] c_floor;
wire lock;

wire sampler;                             

// assign statements (if any)                          
motor_12 i1 (
// port map - connection between master ports and signals/registers   
	.arrival(arrival),
	.c_floor(c_floor),
	.clk_1KHz(clk_1KHz),
	.lock(lock),
	.t_floor(t_floor)
);

// clk_1KHz
initial
begin
	repeat(333)
	begin
		clk_1KHz = 1'b0;
		clk_1KHz = #15000 1'b1;
		# 15000;
	end
	clk_1KHz = 1'b0;
end 
// t_floor[ 1 ]
initial
begin
	t_floor[1] = 1'b1;
	t_floor[1] = #5280000 1'b0;
end 
// t_floor[ 0 ]
initial
begin
	t_floor[0] = 1'b1;
	t_floor[0] = #5280000 1'b0;
end 

// arrival
initial
begin
	arrival = 1'b1;
	arrival = #800000 1'b0;
	arrival = #640000 1'b1;
	arrival = #3840000 1'b0;
	arrival = #640000 1'b1;
end 

motor_12_vlg_sample_tst tb_sample (
	.arrival(arrival),
	.clk_1KHz(clk_1KHz),
	.t_floor(t_floor),
	.sampler_tx(sampler)
);

motor_12_vlg_check_tst tb_out(
	.c_floor(c_floor),
	.lock(lock),
	.sampler_rx(sampler)
);
endmodule

