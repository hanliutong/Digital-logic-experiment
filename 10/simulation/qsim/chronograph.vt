// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/28/2017 11:02:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    register_bank
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_bank_vlg_sample_tst(
	1KHz,
	CLRN,
	F1_in,
	min,
	ms,
	s,
	SW1,
	sampler_tx
);
input  1KHz;
input  CLRN;
input  F1_in;
input [7:0] min;
input [7:0] ms;
input [7:0] s;
input  SW1;
output sampler_tx;

reg sample;
time current_time;
always @(1KHz or CLRN or F1_in or min or ms or s or SW1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module register_bank_vlg_check_tst (
	Dout,
	Z,
	sampler_rx
);
input [23:0] Dout;
input [8:1] Z;
input sampler_rx;

reg [23:0] Dout_expected;
reg [8:1] Z_expected;

reg [23:0] Dout_prev;
reg [8:1] Z_prev;

reg [23:0] Dout_expected_prev;
reg [8:1] Z_expected_prev;

reg [23:0] last_Dout_exp;
reg [8:1] last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Dout_prev = Dout;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Dout_expected_prev = Dout_expected;
	Z_expected_prev = Z_expected;
end


// expected Dout[ 23 ]
initial
begin
	Dout_expected[23] = 1'bX;
end 
// expected Dout[ 22 ]
initial
begin
	Dout_expected[22] = 1'bX;
end 
// expected Dout[ 21 ]
initial
begin
	Dout_expected[21] = 1'bX;
end 
// expected Dout[ 20 ]
initial
begin
	Dout_expected[20] = 1'bX;
end 
// expected Dout[ 19 ]
initial
begin
	Dout_expected[19] = 1'bX;
end 
// expected Dout[ 18 ]
initial
begin
	Dout_expected[18] = 1'bX;
end 
// expected Dout[ 17 ]
initial
begin
	Dout_expected[17] = 1'bX;
end 
// expected Dout[ 16 ]
initial
begin
	Dout_expected[16] = 1'bX;
end 
// expected Dout[ 15 ]
initial
begin
	Dout_expected[15] = 1'bX;
end 
// expected Dout[ 14 ]
initial
begin
	Dout_expected[14] = 1'bX;
end 
// expected Dout[ 13 ]
initial
begin
	Dout_expected[13] = 1'bX;
end 
// expected Dout[ 12 ]
initial
begin
	Dout_expected[12] = 1'bX;
end 
// expected Dout[ 11 ]
initial
begin
	Dout_expected[11] = 1'bX;
end 
// expected Dout[ 10 ]
initial
begin
	Dout_expected[10] = 1'bX;
end 
// expected Dout[ 9 ]
initial
begin
	Dout_expected[9] = 1'bX;
end 
// expected Dout[ 8 ]
initial
begin
	Dout_expected[8] = 1'bX;
end 
// expected Dout[ 7 ]
initial
begin
	Dout_expected[7] = 1'bX;
end 
// expected Dout[ 6 ]
initial
begin
	Dout_expected[6] = 1'bX;
end 
// expected Dout[ 5 ]
initial
begin
	Dout_expected[5] = 1'bX;
end 
// expected Dout[ 4 ]
initial
begin
	Dout_expected[4] = 1'bX;
end 
// expected Dout[ 3 ]
initial
begin
	Dout_expected[3] = 1'bX;
end 
// expected Dout[ 2 ]
initial
begin
	Dout_expected[2] = 1'bX;
end 
// expected Dout[ 1 ]
initial
begin
	Dout_expected[1] = 1'bX;
end 
// expected Dout[ 0 ]
initial
begin
	Dout_expected[0] = 1'bX;
end 

// expected Z[7]
initial
begin
	Z_expected[7] = 1'bX;
end 

// expected Z[6]
initial
begin
	Z_expected[6] = 1'bX;
end 

// expected Z[5]
initial
begin
	Z_expected[5] = 1'bX;
end 

// expected Z[4]
initial
begin
	Z_expected[4] = 1'bX;
end 

// expected Z[3]
initial
begin
	Z_expected[3] = 1'bX;
end 

// expected Z[2]
initial
begin
	Z_expected[2] = 1'bX;
end 

// expected Z[1]
initial
begin
	Z_expected[1] = 1'bX;
end 

// expected Z[8]
initial
begin
	Z_expected[8] = 1'bX;
end 
// generate trigger
always @(Dout_expected or Dout or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Dout = %b | expected Z = %b | ",Dout_expected_prev,Z_expected_prev);
	$display("| real Dout = %b | real Z = %b | ",Dout_prev,Z_prev);
`endif
	if (
		( Dout_expected_prev[0] !== 1'bx ) && ( Dout_prev[0] !== Dout_expected_prev[0] )
		&& ((Dout_expected_prev[0] !== last_Dout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[0] = Dout_expected_prev[0];
	end
	if (
		( Dout_expected_prev[1] !== 1'bx ) && ( Dout_prev[1] !== Dout_expected_prev[1] )
		&& ((Dout_expected_prev[1] !== last_Dout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[1] = Dout_expected_prev[1];
	end
	if (
		( Dout_expected_prev[2] !== 1'bx ) && ( Dout_prev[2] !== Dout_expected_prev[2] )
		&& ((Dout_expected_prev[2] !== last_Dout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[2] = Dout_expected_prev[2];
	end
	if (
		( Dout_expected_prev[3] !== 1'bx ) && ( Dout_prev[3] !== Dout_expected_prev[3] )
		&& ((Dout_expected_prev[3] !== last_Dout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[3] = Dout_expected_prev[3];
	end
	if (
		( Dout_expected_prev[4] !== 1'bx ) && ( Dout_prev[4] !== Dout_expected_prev[4] )
		&& ((Dout_expected_prev[4] !== last_Dout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[4] = Dout_expected_prev[4];
	end
	if (
		( Dout_expected_prev[5] !== 1'bx ) && ( Dout_prev[5] !== Dout_expected_prev[5] )
		&& ((Dout_expected_prev[5] !== last_Dout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[5] = Dout_expected_prev[5];
	end
	if (
		( Dout_expected_prev[6] !== 1'bx ) && ( Dout_prev[6] !== Dout_expected_prev[6] )
		&& ((Dout_expected_prev[6] !== last_Dout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[6] = Dout_expected_prev[6];
	end
	if (
		( Dout_expected_prev[7] !== 1'bx ) && ( Dout_prev[7] !== Dout_expected_prev[7] )
		&& ((Dout_expected_prev[7] !== last_Dout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[7] = Dout_expected_prev[7];
	end
	if (
		( Dout_expected_prev[8] !== 1'bx ) && ( Dout_prev[8] !== Dout_expected_prev[8] )
		&& ((Dout_expected_prev[8] !== last_Dout_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[8] = Dout_expected_prev[8];
	end
	if (
		( Dout_expected_prev[9] !== 1'bx ) && ( Dout_prev[9] !== Dout_expected_prev[9] )
		&& ((Dout_expected_prev[9] !== last_Dout_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[9] = Dout_expected_prev[9];
	end
	if (
		( Dout_expected_prev[10] !== 1'bx ) && ( Dout_prev[10] !== Dout_expected_prev[10] )
		&& ((Dout_expected_prev[10] !== last_Dout_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[10] = Dout_expected_prev[10];
	end
	if (
		( Dout_expected_prev[11] !== 1'bx ) && ( Dout_prev[11] !== Dout_expected_prev[11] )
		&& ((Dout_expected_prev[11] !== last_Dout_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[11] = Dout_expected_prev[11];
	end
	if (
		( Dout_expected_prev[12] !== 1'bx ) && ( Dout_prev[12] !== Dout_expected_prev[12] )
		&& ((Dout_expected_prev[12] !== last_Dout_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[12] = Dout_expected_prev[12];
	end
	if (
		( Dout_expected_prev[13] !== 1'bx ) && ( Dout_prev[13] !== Dout_expected_prev[13] )
		&& ((Dout_expected_prev[13] !== last_Dout_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[13] = Dout_expected_prev[13];
	end
	if (
		( Dout_expected_prev[14] !== 1'bx ) && ( Dout_prev[14] !== Dout_expected_prev[14] )
		&& ((Dout_expected_prev[14] !== last_Dout_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[14] = Dout_expected_prev[14];
	end
	if (
		( Dout_expected_prev[15] !== 1'bx ) && ( Dout_prev[15] !== Dout_expected_prev[15] )
		&& ((Dout_expected_prev[15] !== last_Dout_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[15] = Dout_expected_prev[15];
	end
	if (
		( Dout_expected_prev[16] !== 1'bx ) && ( Dout_prev[16] !== Dout_expected_prev[16] )
		&& ((Dout_expected_prev[16] !== last_Dout_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[16] = Dout_expected_prev[16];
	end
	if (
		( Dout_expected_prev[17] !== 1'bx ) && ( Dout_prev[17] !== Dout_expected_prev[17] )
		&& ((Dout_expected_prev[17] !== last_Dout_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[17] = Dout_expected_prev[17];
	end
	if (
		( Dout_expected_prev[18] !== 1'bx ) && ( Dout_prev[18] !== Dout_expected_prev[18] )
		&& ((Dout_expected_prev[18] !== last_Dout_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[18] = Dout_expected_prev[18];
	end
	if (
		( Dout_expected_prev[19] !== 1'bx ) && ( Dout_prev[19] !== Dout_expected_prev[19] )
		&& ((Dout_expected_prev[19] !== last_Dout_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[19] = Dout_expected_prev[19];
	end
	if (
		( Dout_expected_prev[20] !== 1'bx ) && ( Dout_prev[20] !== Dout_expected_prev[20] )
		&& ((Dout_expected_prev[20] !== last_Dout_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[20] = Dout_expected_prev[20];
	end
	if (
		( Dout_expected_prev[21] !== 1'bx ) && ( Dout_prev[21] !== Dout_expected_prev[21] )
		&& ((Dout_expected_prev[21] !== last_Dout_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[21] = Dout_expected_prev[21];
	end
	if (
		( Dout_expected_prev[22] !== 1'bx ) && ( Dout_prev[22] !== Dout_expected_prev[22] )
		&& ((Dout_expected_prev[22] !== last_Dout_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[22] = Dout_expected_prev[22];
	end
	if (
		( Dout_expected_prev[23] !== 1'bx ) && ( Dout_prev[23] !== Dout_expected_prev[23] )
		&& ((Dout_expected_prev[23] !== last_Dout_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dout_exp[23] = Dout_expected_prev[23];
	end
	if (
		( Z_expected_prev[0] !== 1'bx ) && ( Z_prev[0] !== Z_expected_prev[0] )
		&& ((Z_expected_prev[0] !== last_Z_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[0] = Z_expected_prev[0];
	end
	if (
		( Z_expected_prev[1] !== 1'bx ) && ( Z_prev[1] !== Z_expected_prev[1] )
		&& ((Z_expected_prev[1] !== last_Z_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[1] = Z_expected_prev[1];
	end
	if (
		( Z_expected_prev[2] !== 1'bx ) && ( Z_prev[2] !== Z_expected_prev[2] )
		&& ((Z_expected_prev[2] !== last_Z_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[2] = Z_expected_prev[2];
	end
	if (
		( Z_expected_prev[3] !== 1'bx ) && ( Z_prev[3] !== Z_expected_prev[3] )
		&& ((Z_expected_prev[3] !== last_Z_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[3] = Z_expected_prev[3];
	end
	if (
		( Z_expected_prev[4] !== 1'bx ) && ( Z_prev[4] !== Z_expected_prev[4] )
		&& ((Z_expected_prev[4] !== last_Z_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[4] = Z_expected_prev[4];
	end
	if (
		( Z_expected_prev[5] !== 1'bx ) && ( Z_prev[5] !== Z_expected_prev[5] )
		&& ((Z_expected_prev[5] !== last_Z_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[5] = Z_expected_prev[5];
	end
	if (
		( Z_expected_prev[6] !== 1'bx ) && ( Z_prev[6] !== Z_expected_prev[6] )
		&& ((Z_expected_prev[6] !== last_Z_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[6] = Z_expected_prev[6];
	end
	if (
		( Z_expected_prev[7] !== 1'bx ) && ( Z_prev[7] !== Z_expected_prev[7] )
		&& ((Z_expected_prev[7] !== last_Z_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[7] = Z_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module register_bank_vlg_vec_tst();
// constants                                           
// general purpose registers
reg 1KHz;
reg CLRN;
reg F1_in;
reg [7:0] min;
reg [7:0] ms;
reg [7:0] s;
reg SW1;
// wires                                               
wire [23:0] Dout;
wire [8:1] Z;

wire sampler;                             

// assign statements (if any)                          
register_bank i1 (
// port map - connection between master ports and signals/registers   
	.\1KHz (1KHz),
	.CLRN(CLRN),
	.Dout(Dout),
	.F1_in(F1_in),
	.min(min),
	.ms(ms),
	.s(s),
	.SW1(SW1),
	.Z(Z)
);

// SW1
always
begin
	SW1 = 1'b0;
	SW1 = #500000 1'b1;
	#500000;
end 

// 1KHz
always
begin
	1KHz = 1'b0;
	1KHz = #1000 1'b1;
	#1000;
end 

// CLRN
initial
begin
	CLRN = 1'b0;
	CLRN = #950000 1'b1;
end 

// F1_in
always
begin
	F1_in = 1'b0;
	F1_in = #25000 1'b1;
	#25000;
end 
// min[ 7 ]
initial
begin
	min[7] = 1'b0;
end 
// min[ 6 ]
initial
begin
	min[6] = 1'b0;
end 
// min[ 5 ]
initial
begin
	min[5] = 1'b0;
	min[5] = #800000 1'b1;
end 
// min[ 4 ]
initial
begin
	min[4] = 1'b0;
	min[4] = #400000 1'b1;
	min[4] = #400000 1'b0;
end 
// min[ 3 ]
initial
begin
	repeat(2)
	begin
		min[3] = 1'b0;
		min[3] = #200000 1'b1;
		# 200000;
	end
	min[3] = 1'b0;
end 
// min[ 2 ]
always
begin
	min[2] = 1'b0;
	min[2] = #100000 1'b1;
	#100000;
end 
// min[ 1 ]
always
begin
	min[1] = 1'b0;
	min[1] = #50000 1'b1;
	#50000;
end 
// min[ 0 ]
always
begin
	min[0] = 1'b0;
	min[0] = #25000 1'b1;
	#25000;
end 
// s[ 7 ]
initial
begin
	s[7] = 1'b0;
end 
// s[ 6 ]
initial
begin
	s[6] = 1'b0;
end 
// s[ 5 ]
initial
begin
	s[5] = 1'b0;
	s[5] = #800000 1'b1;
end 
// s[ 4 ]
initial
begin
	s[4] = 1'b0;
	s[4] = #400000 1'b1;
	s[4] = #400000 1'b0;
end 
// s[ 3 ]
initial
begin
	repeat(2)
	begin
		s[3] = 1'b0;
		s[3] = #200000 1'b1;
		# 200000;
	end
	s[3] = 1'b0;
end 
// s[ 2 ]
always
begin
	s[2] = 1'b0;
	s[2] = #100000 1'b1;
	#100000;
end 
// s[ 1 ]
always
begin
	s[1] = 1'b0;
	s[1] = #50000 1'b1;
	#50000;
end 
// s[ 0 ]
always
begin
	s[0] = 1'b0;
	s[0] = #25000 1'b1;
	#25000;
end 
// ms[ 7 ]
initial
begin
	ms[7] = 1'b0;
end 
// ms[ 6 ]
initial
begin
	ms[6] = 1'b0;
end 
// ms[ 5 ]
initial
begin
	ms[5] = 1'b0;
	ms[5] = #800000 1'b1;
end 
// ms[ 4 ]
initial
begin
	ms[4] = 1'b0;
	ms[4] = #400000 1'b1;
	ms[4] = #400000 1'b0;
end 
// ms[ 3 ]
initial
begin
	repeat(2)
	begin
		ms[3] = 1'b0;
		ms[3] = #200000 1'b1;
		# 200000;
	end
	ms[3] = 1'b0;
end 
// ms[ 2 ]
always
begin
	ms[2] = 1'b0;
	ms[2] = #100000 1'b1;
	#100000;
end 
// ms[ 1 ]
always
begin
	ms[1] = 1'b0;
	ms[1] = #50000 1'b1;
	#50000;
end 
// ms[ 0 ]
always
begin
	ms[0] = 1'b0;
	ms[0] = #25000 1'b1;
	#25000;
end 

register_bank_vlg_sample_tst tb_sample (
	.1KHz(1KHz),
	.CLRN(CLRN),
	.F1_in(F1_in),
	.min(min),
	.ms(ms),
	.s(s),
	.SW1(SW1),
	.sampler_tx(sampler)
);

register_bank_vlg_check_tst tb_out(
	.Dout(Dout),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

